//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! <https://github.com/kinobi-so/kinobi>
//!

use crate::generated::types::Condition;
use crate::generated::types::State;
use borsh::BorshDeserialize;
use borsh::BorshSerialize;
use solana_program::pubkey::Pubkey;

/// Seeds: ["whitelist", <namespace>, <uuid>]

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct WhitelistV2 {
    pub discriminator: [u8; 8],
    pub version: u8,
    pub bump: u8,
    pub uuid: [u8; 32],
    pub state: State,
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub update_authority: Pubkey,
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub namespace: Pubkey,
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub freeze_authority: Pubkey,
    pub conditions: Vec<Condition>,
}

impl WhitelistV2 {
    pub const LEN: usize = 239;

    /// Prefix values used to generate a PDA for this account.
    ///
    /// Values are positional and appear in the following order:
    ///
    ///   0. `WhitelistV2::PREFIX`
    ///   1. namespace (`Pubkey`)
    ///   2. uuid (`[u8; 32]`)
    pub const PREFIX: &'static [u8] = "whitelist".as_bytes();

    pub fn create_pda(
        namespace: Pubkey,
        uuid: [u8; 32],
        bump: u8,
    ) -> Result<solana_program::pubkey::Pubkey, solana_program::pubkey::PubkeyError> {
        solana_program::pubkey::Pubkey::create_program_address(
            &["whitelist".as_bytes(), namespace.as_ref(), &uuid, &[bump]],
            &crate::TENSOR_WHITELIST_ID,
        )
    }

    pub fn find_pda(namespace: &Pubkey, uuid: [u8; 32]) -> (solana_program::pubkey::Pubkey, u8) {
        solana_program::pubkey::Pubkey::find_program_address(
            &["whitelist".as_bytes(), namespace.as_ref(), &uuid],
            &crate::TENSOR_WHITELIST_ID,
        )
    }

    #[inline(always)]
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        let mut data = data;
        Self::deserialize(&mut data)
    }
}

impl<'a> TryFrom<&solana_program::account_info::AccountInfo<'a>> for WhitelistV2 {
    type Error = std::io::Error;

    fn try_from(
        account_info: &solana_program::account_info::AccountInfo<'a>,
    ) -> Result<Self, Self::Error> {
        let mut data: &[u8] = &(*account_info.data).borrow();
        Self::deserialize(&mut data)
    }
}
