//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! <https://github.com/kinobi-so/kinobi>
//!

use crate::generated::types::Condition;
use crate::generated::types::State;
use borsh::BorshDeserialize;
use borsh::BorshSerialize;
use solana_program::pubkey::Pubkey;

/// Whitelist V2 state
/// Seeds: `["whitelist", <namespace>, <uuid>]`
///
/// The state account for Whitelist V2. This account stores all the information
/// and values of a Whitelist, including the list of conditions to validate an item against.

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct WhitelistV2 {
    pub discriminator: [u8; 8],
    /// Whitelist version, used to control upgrades.
    pub version: u8,
    /// Bump seed used to derive the PDA.
    pub bump: u8,
    /// Owner-chosen identifier for the whitelist.
    pub uuid: [u8; 32],
    /// Whitelist state--currently either Frozen or Unfrozen.
    pub state: State,
    /// Authority that can update the whitelist.
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub update_authority: Pubkey,
    /// Namespace for the whitelist to further differentiate it from other whitelists owned by the same authority.
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub namespace: Pubkey,
    /// Authority that can freeze/unfreeze the whitelist.
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub freeze_authority: Pubkey,
    /// Whitelist conditions that must be met to validate against the whitelist.
    pub conditions: Vec<Condition>,
}

impl WhitelistV2 {
    pub const LEN: usize = 239;

    /// Prefix values used to generate a PDA for this account.
    ///
    /// Values are positional and appear in the following order:
    ///
    ///   0. `WhitelistV2::PREFIX`
    ///   1. namespace (`Pubkey`)
    ///   2. uuid (`[u8; 32]`)
    pub const PREFIX: &'static [u8] = "whitelist".as_bytes();

    pub fn create_pda(
        namespace: Pubkey,
        uuid: [u8; 32],
        bump: u8,
    ) -> Result<solana_program::pubkey::Pubkey, solana_program::pubkey::PubkeyError> {
        solana_program::pubkey::Pubkey::create_program_address(
            &["whitelist".as_bytes(), namespace.as_ref(), &uuid, &[bump]],
            &crate::TENSOR_WHITELIST_ID,
        )
    }

    pub fn find_pda(namespace: &Pubkey, uuid: [u8; 32]) -> (solana_program::pubkey::Pubkey, u8) {
        solana_program::pubkey::Pubkey::find_program_address(
            &["whitelist".as_bytes(), namespace.as_ref(), &uuid],
            &crate::TENSOR_WHITELIST_ID,
        )
    }

    #[inline(always)]
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        let mut data = data;
        Self::deserialize(&mut data)
    }
}

impl<'a> TryFrom<&solana_program::account_info::AccountInfo<'a>> for WhitelistV2 {
    type Error = std::io::Error;

    fn try_from(
        account_info: &solana_program::account_info::AccountInfo<'a>,
    ) -> Result<Self, Self::Error> {
        let mut data: &[u8] = &(*account_info.data).borrow();
        Self::deserialize(&mut data)
    }
}

#[cfg(feature = "anchor")]
impl anchor_lang::AccountDeserialize for WhitelistV2 {
    fn try_deserialize_unchecked(buf: &mut &[u8]) -> anchor_lang::Result<Self> {
        Ok(Self::deserialize(buf)?)
    }
}

#[cfg(feature = "anchor")]
impl anchor_lang::AccountSerialize for WhitelistV2 {}

#[cfg(feature = "anchor")]
impl anchor_lang::Owner for WhitelistV2 {
    fn owner() -> Pubkey {
        crate::TENSOR_WHITELIST_ID
    }
}

#[cfg(feature = "anchor-idl-build")]
impl anchor_lang::IdlBuild for WhitelistV2 {}

#[cfg(feature = "anchor-idl-build")]
impl anchor_lang::Discriminator for WhitelistV2 {
    const DISCRIMINATOR: [u8; 8] = [0; 8];
}
