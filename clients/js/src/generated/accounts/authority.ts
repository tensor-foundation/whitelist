/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/web3.js';
import { findAuthorityPda } from '../pdas';

export type Authority = {
  discriminator: ReadonlyUint8Array;
  bump: number;
  /** cosigner of the whitelist - has rights to update it if unfrozen */
  cosigner: Address;
  /**
   * owner of the whitelist (stricter, should be handled more carefully)
   * has rights to 1)freeze, 2)unfreeze, 3)update frozen whitelists
   */
  owner: Address;
  reserved: ReadonlyUint8Array;
};

export type AuthorityArgs = {
  bump: number;
  /** cosigner of the whitelist - has rights to update it if unfrozen */
  cosigner: Address;
  /**
   * owner of the whitelist (stricter, should be handled more carefully)
   * has rights to 1)freeze, 2)unfreeze, 3)update frozen whitelists
   */
  owner: Address;
  reserved: ReadonlyUint8Array;
};

export function getAuthorityEncoder(): Encoder<AuthorityArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['bump', getU8Encoder()],
      ['cosigner', getAddressEncoder()],
      ['owner', getAddressEncoder()],
      ['reserved', fixEncoderSize(getBytesEncoder(), 64)],
    ]),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([36, 108, 254, 18, 167, 144, 27, 36]),
    })
  );
}

export function getAuthorityDecoder(): Decoder<Authority> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['bump', getU8Decoder()],
    ['cosigner', getAddressDecoder()],
    ['owner', getAddressDecoder()],
    ['reserved', fixDecoderSize(getBytesDecoder(), 64)],
  ]);
}

export function getAuthorityCodec(): Codec<AuthorityArgs, Authority> {
  return combineCodec(getAuthorityEncoder(), getAuthorityDecoder());
}

export function decodeAuthority<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Authority, TAddress>;
export function decodeAuthority<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Authority, TAddress>;
export function decodeAuthority<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Authority, TAddress> | MaybeAccount<Authority, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getAuthorityDecoder()
  );
}

export async function fetchAuthority<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Authority, TAddress>> {
  const maybeAccount = await fetchMaybeAuthority(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeAuthority<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Authority, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeAuthority(maybeAccount);
}

export async function fetchAllAuthority(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Authority>[]> {
  const maybeAccounts = await fetchAllMaybeAuthority(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeAuthority(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Authority>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeAuthority(maybeAccount));
}

export function getAuthoritySize(): number {
  return 137;
}

export async function fetchAuthorityFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<Account<Authority>> {
  const maybeAccount = await fetchMaybeAuthorityFromSeeds(rpc, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeAuthorityFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<MaybeAccount<Authority>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findAuthorityPda({ programAddress });
  return await fetchMaybeAuthority(rpc, address, fetchConfig);
}
