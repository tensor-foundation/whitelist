/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/web3.js';
import { MintProofSeeds, findMintProofPda } from '../pdas';

export type MintProof = {
  discriminator: ReadonlyUint8Array;
  proofLen: number;
  proof: Array<ReadonlyUint8Array>;
};

export type MintProofArgs = {
  proofLen: number;
  proof: Array<ReadonlyUint8Array>;
};

export function getMintProofEncoder(): Encoder<MintProofArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['proofLen', getU8Encoder()],
      [
        'proof',
        getArrayEncoder(fixEncoderSize(getBytesEncoder(), 32), { size: 28 }),
      ],
    ]),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([227, 131, 106, 240, 190, 48, 219, 228]),
    })
  );
}

export function getMintProofDecoder(): Decoder<MintProof> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['proofLen', getU8Decoder()],
    [
      'proof',
      getArrayDecoder(fixDecoderSize(getBytesDecoder(), 32), { size: 28 }),
    ],
  ]);
}

export function getMintProofCodec(): Codec<MintProofArgs, MintProof> {
  return combineCodec(getMintProofEncoder(), getMintProofDecoder());
}

export function decodeMintProof<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<MintProof, TAddress>;
export function decodeMintProof<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<MintProof, TAddress>;
export function decodeMintProof<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<MintProof, TAddress> | MaybeAccount<MintProof, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getMintProofDecoder()
  );
}

export async function fetchMintProof<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<MintProof, TAddress>> {
  const maybeAccount = await fetchMaybeMintProof(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeMintProof<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<MintProof, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeMintProof(maybeAccount);
}

export async function fetchAllMintProof(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<MintProof>[]> {
  const maybeAccounts = await fetchAllMaybeMintProof(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeMintProof(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<MintProof>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeMintProof(maybeAccount));
}

export function getMintProofSize(): number {
  return 28;
}

export async function fetchMintProofFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: MintProofSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<Account<MintProof>> {
  const maybeAccount = await fetchMaybeMintProofFromSeeds(rpc, seeds, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeMintProofFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: MintProofSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<MaybeAccount<MintProof>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findMintProofPda(seeds, { programAddress });
  return await fetchMaybeMintProof(rpc, address, fetchConfig);
}
