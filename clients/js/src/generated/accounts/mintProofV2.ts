/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  EncodedAccount,
  FetchAccountConfig,
  FetchAccountsConfig,
  MaybeAccount,
  MaybeEncodedAccount,
  assertAccountExists,
  assertAccountsExist,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
} from '@solana/accounts';
import {
  Address,
  getAddressDecoder,
  getAddressEncoder,
} from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  mapEncoder,
} from '@solana/codecs-core';
import {
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs-data-structures';
import {
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
} from '@solana/codecs-numbers';
import { MintProofV2Seeds, findMintProofV2Pda } from '../pdas';

export type MintProofV2<TAddress extends string = string> = Account<
  MintProofV2AccountData,
  TAddress
>;

export type MaybeMintProofV2<TAddress extends string = string> = MaybeAccount<
  MintProofV2AccountData,
  TAddress
>;

export type MintProofV2AccountData = {
  discriminator: Array<number>;
  proofLen: number;
  proof: Array<Uint8Array>;
  creationSlot: bigint;
  payer: Address;
};

export type MintProofV2AccountDataArgs = {
  proofLen: number;
  proof: Array<Uint8Array>;
  creationSlot: number | bigint;
  payer: Address;
};

export function getMintProofV2AccountDataEncoder() {
  return mapEncoder(
    getStructEncoder<{
      discriminator: Array<number>;
      proofLen: number;
      proof: Array<Uint8Array>;
      creationSlot: number | bigint;
      payer: Address;
    }>([
      ['discriminator', getArrayEncoder(getU8Encoder(), { size: 8 })],
      ['proofLen', getU8Encoder()],
      ['proof', getArrayEncoder(getBytesEncoder({ size: 32 }), { size: 28 })],
      ['creationSlot', getU64Encoder()],
      ['payer', getAddressEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: [22, 197, 150, 178, 249, 225, 183, 75],
    })
  ) satisfies Encoder<MintProofV2AccountDataArgs>;
}

export function getMintProofV2AccountDataDecoder() {
  return getStructDecoder<MintProofV2AccountData>([
    ['discriminator', getArrayDecoder(getU8Decoder(), { size: 8 })],
    ['proofLen', getU8Decoder()],
    ['proof', getArrayDecoder(getBytesDecoder({ size: 32 }), { size: 28 })],
    ['creationSlot', getU64Decoder()],
    ['payer', getAddressDecoder()],
  ]) satisfies Decoder<MintProofV2AccountData>;
}

export function getMintProofV2AccountDataCodec(): Codec<
  MintProofV2AccountDataArgs,
  MintProofV2AccountData
> {
  return combineCodec(
    getMintProofV2AccountDataEncoder(),
    getMintProofV2AccountDataDecoder()
  );
}

export function decodeMintProofV2<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): MintProofV2<TAddress>;
export function decodeMintProofV2<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeMintProofV2<TAddress>;
export function decodeMintProofV2<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): MintProofV2<TAddress> | MaybeMintProofV2<TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getMintProofV2AccountDataDecoder()
  );
}

export async function fetchMintProofV2<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MintProofV2<TAddress>> {
  const maybeAccount = await fetchMaybeMintProofV2(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeMintProofV2<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeMintProofV2<TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeMintProofV2(maybeAccount);
}

export async function fetchAllMintProofV2(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MintProofV2[]> {
  const maybeAccounts = await fetchAllMaybeMintProofV2(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeMintProofV2(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeMintProofV2[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeMintProofV2(maybeAccount));
}

export function getMintProofV2Size(): number {
  return 945;
}

export async function fetchMintProofV2FromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: MintProofV2Seeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<MintProofV2> {
  const maybeAccount = await fetchMaybeMintProofV2FromSeeds(rpc, seeds, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeMintProofV2FromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: MintProofV2Seeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<MaybeMintProofV2> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findMintProofV2Pda(seeds, { programAddress });
  return fetchMaybeMintProofV2(rpc, address, fetchConfig);
}
