/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Account,
  Address,
  Codec,
  Decoder,
  EncodedAccount,
  Encoder,
  FetchAccountConfig,
  FetchAccountsConfig,
  MaybeAccount,
  MaybeEncodedAccount,
  ReadonlyUint8Array,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from '@solana/web3.js';
import { WhitelistV2Seeds, findWhitelistV2Pda } from '../pdas';
import {
  Condition,
  ConditionArgs,
  State,
  StateArgs,
  getConditionDecoder,
  getConditionEncoder,
  getStateDecoder,
  getStateEncoder,
} from '../types';

export type WhitelistV2 = {
  discriminator: ReadonlyUint8Array;
  version: number;
  bump: number;
  uuid: ReadonlyUint8Array;
  state: State;
  updateAuthority: Address;
  namespace: Address;
  freezeAuthority: Address;
  conditions: Array<Condition>;
};

export type WhitelistV2Args = {
  version: number;
  bump: number;
  uuid: ReadonlyUint8Array;
  state: StateArgs;
  updateAuthority: Address;
  namespace: Address;
  freezeAuthority: Address;
  conditions: Array<ConditionArgs>;
};

export function getWhitelistV2Encoder(): Encoder<WhitelistV2Args> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['version', getU8Encoder()],
      ['bump', getU8Encoder()],
      ['uuid', fixEncoderSize(getBytesEncoder(), 32)],
      ['state', getStateEncoder()],
      ['updateAuthority', getAddressEncoder()],
      ['namespace', getAddressEncoder()],
      ['freezeAuthority', getAddressEncoder()],
      ['conditions', getArrayEncoder(getConditionEncoder())],
    ]),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([136, 184, 45, 191, 85, 203, 191, 119]),
    })
  );
}

export function getWhitelistV2Decoder(): Decoder<WhitelistV2> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['version', getU8Decoder()],
    ['bump', getU8Decoder()],
    ['uuid', fixDecoderSize(getBytesDecoder(), 32)],
    ['state', getStateDecoder()],
    ['updateAuthority', getAddressDecoder()],
    ['namespace', getAddressDecoder()],
    ['freezeAuthority', getAddressDecoder()],
    ['conditions', getArrayDecoder(getConditionDecoder())],
  ]);
}

export function getWhitelistV2Codec(): Codec<WhitelistV2Args, WhitelistV2> {
  return combineCodec(getWhitelistV2Encoder(), getWhitelistV2Decoder());
}

export function decodeWhitelistV2<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<WhitelistV2, TAddress>;
export function decodeWhitelistV2<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<WhitelistV2, TAddress>;
export function decodeWhitelistV2<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<WhitelistV2, TAddress> | MaybeAccount<WhitelistV2, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getWhitelistV2Decoder()
  );
}

export async function fetchWhitelistV2<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<WhitelistV2, TAddress>> {
  const maybeAccount = await fetchMaybeWhitelistV2(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeWhitelistV2<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<WhitelistV2, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeWhitelistV2(maybeAccount);
}

export async function fetchAllWhitelistV2(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<WhitelistV2>[]> {
  const maybeAccounts = await fetchAllMaybeWhitelistV2(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeWhitelistV2(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<WhitelistV2>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeWhitelistV2(maybeAccount));
}

export function getWhitelistV2Size(): number {
  return 239;
}

export async function fetchWhitelistV2FromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: WhitelistV2Seeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<Account<WhitelistV2>> {
  const maybeAccount = await fetchMaybeWhitelistV2FromSeeds(rpc, seeds, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeWhitelistV2FromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: WhitelistV2Seeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<MaybeAccount<WhitelistV2>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findWhitelistV2Pda(seeds, { programAddress });
  return await fetchMaybeWhitelistV2(rpc, address, fetchConfig);
}
