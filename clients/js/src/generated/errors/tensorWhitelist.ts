/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

/** BadCosigner: passed in cosigner doesnt have the rights to do this */
export const TENSOR_WHITELIST_ERROR__BAD_COSIGNER = 0x1770; // 6000
/** MissingVerification: missing all 3 verification methods: at least one must be present */
export const TENSOR_WHITELIST_ERROR__MISSING_VERIFICATION = 0x1771; // 6001
/** MissingName: missing name */
export const TENSOR_WHITELIST_ERROR__MISSING_NAME = 0x1772; // 6002
/** BadWhitelist: bad whitelist */
export const TENSOR_WHITELIST_ERROR__BAD_WHITELIST = 0x1773; // 6003
/** ProofTooLong: proof provided exceeds the limit of 32 hashes */
export const TENSOR_WHITELIST_ERROR__PROOF_TOO_LONG = 0x1774; // 6004
/** BadOwner: passed in owner doesnt have the rights to do this */
export const TENSOR_WHITELIST_ERROR__BAD_OWNER = 0x1775; // 6005
/** FailedVocVerification: failed voc verification */
export const TENSOR_WHITELIST_ERROR__FAILED_VOC_VERIFICATION = 0x1776; // 6006
/** FailedFvcVerification: failed fvc verification */
export const TENSOR_WHITELIST_ERROR__FAILED_FVC_VERIFICATION = 0x1777; // 6007
/** FailedMerkleProofVerification: failed merkle proof verification */
export const TENSOR_WHITELIST_ERROR__FAILED_MERKLE_PROOF_VERIFICATION = 0x1778; // 6008
/** NoConditions: no whitelist conditions provided */
export const TENSOR_WHITELIST_ERROR__NO_CONDITIONS = 0x1779; // 6009
/** InvalidAuthority: invalid authority */
export const TENSOR_WHITELIST_ERROR__INVALID_AUTHORITY = 0x177a; // 6010
/** NotMerkleRoot: condition at index not a merkle root */
export const TENSOR_WHITELIST_ERROR__NOT_MERKLE_ROOT = 0x177b; // 6011
/** InvalidWhitelistIndex: invalid whitelist index */
export const TENSOR_WHITELIST_ERROR__INVALID_WHITELIST_INDEX = 0x177c; // 6012
/** TooManyConditions: too many conditions */
export const TENSOR_WHITELIST_ERROR__TOO_MANY_CONDITIONS = 0x177d; // 6013
/** EmptyConditions: cannot have empty conditions */
export const TENSOR_WHITELIST_ERROR__EMPTY_CONDITIONS = 0x177e; // 6014
/** TooManyMerkleProofs: too many merkle proofs */
export const TENSOR_WHITELIST_ERROR__TOO_MANY_MERKLE_PROOFS = 0x177f; // 6015
/** WhitelistIsFrozen: whitelist is frozen */
export const TENSOR_WHITELIST_ERROR__WHITELIST_IS_FROZEN = 0x1780; // 6016
/** BadMintProof: bad mint proof */
export const TENSOR_WHITELIST_ERROR__BAD_MINT_PROOF = 0x1781; // 6017
/** MissingMintProof: missing mint proof */
export const TENSOR_WHITELIST_ERROR__MISSING_MINT_PROOF = 0x1782; // 6018

export type TensorWhitelistError =
  | typeof TENSOR_WHITELIST_ERROR__BAD_COSIGNER
  | typeof TENSOR_WHITELIST_ERROR__BAD_MINT_PROOF
  | typeof TENSOR_WHITELIST_ERROR__BAD_OWNER
  | typeof TENSOR_WHITELIST_ERROR__BAD_WHITELIST
  | typeof TENSOR_WHITELIST_ERROR__EMPTY_CONDITIONS
  | typeof TENSOR_WHITELIST_ERROR__FAILED_FVC_VERIFICATION
  | typeof TENSOR_WHITELIST_ERROR__FAILED_MERKLE_PROOF_VERIFICATION
  | typeof TENSOR_WHITELIST_ERROR__FAILED_VOC_VERIFICATION
  | typeof TENSOR_WHITELIST_ERROR__INVALID_AUTHORITY
  | typeof TENSOR_WHITELIST_ERROR__INVALID_WHITELIST_INDEX
  | typeof TENSOR_WHITELIST_ERROR__MISSING_MINT_PROOF
  | typeof TENSOR_WHITELIST_ERROR__MISSING_NAME
  | typeof TENSOR_WHITELIST_ERROR__MISSING_VERIFICATION
  | typeof TENSOR_WHITELIST_ERROR__NO_CONDITIONS
  | typeof TENSOR_WHITELIST_ERROR__NOT_MERKLE_ROOT
  | typeof TENSOR_WHITELIST_ERROR__PROOF_TOO_LONG
  | typeof TENSOR_WHITELIST_ERROR__TOO_MANY_CONDITIONS
  | typeof TENSOR_WHITELIST_ERROR__TOO_MANY_MERKLE_PROOFS
  | typeof TENSOR_WHITELIST_ERROR__WHITELIST_IS_FROZEN;

let tensorWhitelistErrorMessages:
  | Record<TensorWhitelistError, string>
  | undefined;
if (process.env.NODE_ENV !== 'production') {
  tensorWhitelistErrorMessages = {
    [TENSOR_WHITELIST_ERROR__BAD_COSIGNER]: `passed in cosigner doesnt have the rights to do this`,
    [TENSOR_WHITELIST_ERROR__BAD_MINT_PROOF]: `bad mint proof`,
    [TENSOR_WHITELIST_ERROR__BAD_OWNER]: `passed in owner doesnt have the rights to do this`,
    [TENSOR_WHITELIST_ERROR__BAD_WHITELIST]: `bad whitelist`,
    [TENSOR_WHITELIST_ERROR__EMPTY_CONDITIONS]: `cannot have empty conditions`,
    [TENSOR_WHITELIST_ERROR__FAILED_FVC_VERIFICATION]: `failed fvc verification`,
    [TENSOR_WHITELIST_ERROR__FAILED_MERKLE_PROOF_VERIFICATION]: `failed merkle proof verification`,
    [TENSOR_WHITELIST_ERROR__FAILED_VOC_VERIFICATION]: `failed voc verification`,
    [TENSOR_WHITELIST_ERROR__INVALID_AUTHORITY]: `invalid authority`,
    [TENSOR_WHITELIST_ERROR__INVALID_WHITELIST_INDEX]: `invalid whitelist index`,
    [TENSOR_WHITELIST_ERROR__MISSING_MINT_PROOF]: `missing mint proof`,
    [TENSOR_WHITELIST_ERROR__MISSING_NAME]: `missing name`,
    [TENSOR_WHITELIST_ERROR__MISSING_VERIFICATION]: `missing all 3 verification methods: at least one must be present`,
    [TENSOR_WHITELIST_ERROR__NO_CONDITIONS]: `no whitelist conditions provided`,
    [TENSOR_WHITELIST_ERROR__NOT_MERKLE_ROOT]: `condition at index not a merkle root`,
    [TENSOR_WHITELIST_ERROR__PROOF_TOO_LONG]: `proof provided exceeds the limit of 32 hashes`,
    [TENSOR_WHITELIST_ERROR__TOO_MANY_CONDITIONS]: `too many conditions`,
    [TENSOR_WHITELIST_ERROR__TOO_MANY_MERKLE_PROOFS]: `too many merkle proofs`,
    [TENSOR_WHITELIST_ERROR__WHITELIST_IS_FROZEN]: `whitelist is frozen`,
  };
}

export function getTensorWhitelistErrorMessage(
  code: TensorWhitelistError
): string {
  if (process.env.NODE_ENV !== 'production') {
    return (
      tensorWhitelistErrorMessages as Record<TensorWhitelistError, string>
    )[code];
  }

  return 'Error message not available in production bundles.';
}
