/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  fixEncoderSize,
  getAddressEncoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getUtf8Encoder,
  type Address,
  type ProgramDerivedAddress,
  type ReadonlyUint8Array,
} from '@solana/web3.js';

export type WhitelistV2Seeds = {
  /** The namespace address */
  namespace: Address;
  /** UUID of the whitelist */
  uuid: ReadonlyUint8Array;
};

export async function findWhitelistV2Pda(
  seeds: WhitelistV2Seeds,
  config: { programAddress?: Address | undefined } = {}
): Promise<ProgramDerivedAddress> {
  const {
    programAddress = 'TL1ST2iRBzuGTqLn1KXnGdSnEow62BzPnGiqyRXhWtW' as Address<'TL1ST2iRBzuGTqLn1KXnGdSnEow62BzPnGiqyRXhWtW'>,
  } = config;
  return await getProgramDerivedAddress({
    programAddress,
    seeds: [
      getUtf8Encoder().encode('whitelist'),
      getAddressEncoder().encode(seeds.namespace),
      fixEncoderSize(getBytesEncoder(), 32).encode(seeds.uuid),
    ],
  });
}
