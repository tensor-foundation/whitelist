/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Address,
  Codec,
  Decoder,
  Encoder,
  GetDiscriminatedUnionVariant,
  GetDiscriminatedUnionVariantContent,
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getDiscriminatedUnionDecoder,
  getDiscriminatedUnionEncoder,
  getStructDecoder,
  getStructEncoder,
  getTupleDecoder,
  getTupleEncoder,
  getUnitDecoder,
  getUnitEncoder,
} from '@solana/web3.js';

export type Operation =
  | { __kind: 'Noop' }
  | { __kind: 'Clear' }
  | { __kind: 'Set'; fields: readonly [Address] };

export type OperationArgs = Operation;

export function getOperationEncoder(): Encoder<OperationArgs> {
  return getDiscriminatedUnionEncoder([
    ['Noop', getUnitEncoder()],
    ['Clear', getUnitEncoder()],
    [
      'Set',
      getStructEncoder([['fields', getTupleEncoder([getAddressEncoder()])]]),
    ],
  ]);
}

export function getOperationDecoder(): Decoder<Operation> {
  return getDiscriminatedUnionDecoder([
    ['Noop', getUnitDecoder()],
    ['Clear', getUnitDecoder()],
    [
      'Set',
      getStructDecoder([['fields', getTupleDecoder([getAddressDecoder()])]]),
    ],
  ]);
}

export function getOperationCodec(): Codec<OperationArgs, Operation> {
  return combineCodec(getOperationEncoder(), getOperationDecoder());
}

// Data Enum Helpers.
export function operation(
  kind: 'Noop'
): GetDiscriminatedUnionVariant<OperationArgs, '__kind', 'Noop'>;
export function operation(
  kind: 'Clear'
): GetDiscriminatedUnionVariant<OperationArgs, '__kind', 'Clear'>;
export function operation(
  kind: 'Set',
  data: GetDiscriminatedUnionVariantContent<
    OperationArgs,
    '__kind',
    'Set'
  >['fields']
): GetDiscriminatedUnionVariant<OperationArgs, '__kind', 'Set'>;
export function operation<K extends OperationArgs['__kind'], Data>(
  kind: K,
  data?: Data
) {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isOperation<K extends Operation['__kind']>(
  kind: K,
  value: Operation
): value is Operation & { __kind: K } {
  return value.__kind === kind;
}
