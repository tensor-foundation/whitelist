/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { TENSOR_WHITELIST_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getConditionDecoder,
  getConditionEncoder,
  getOperationDecoder,
  getOperationEncoder,
  type Condition,
  type ConditionArgs,
  type Operation,
  type OperationArgs,
} from '../types';

export type UpdateWhitelistV2Instruction<
  TProgram extends string = typeof TENSOR_WHITELIST_PROGRAM_ADDRESS,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountUpdateAuthority extends string | IAccountMeta<string> = string,
  TAccountNewUpdateAuthority extends string | IAccountMeta<string> = string,
  TAccountWhitelist extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountUpdateAuthority extends string
        ? ReadonlySignerAccount<TAccountUpdateAuthority> &
            IAccountSignerMeta<TAccountUpdateAuthority>
        : TAccountUpdateAuthority,
      TAccountNewUpdateAuthority extends string
        ? ReadonlySignerAccount<TAccountNewUpdateAuthority> &
            IAccountSignerMeta<TAccountNewUpdateAuthority>
        : TAccountNewUpdateAuthority,
      TAccountWhitelist extends string
        ? WritableAccount<TAccountWhitelist>
        : TAccountWhitelist,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type UpdateWhitelistV2InstructionData = {
  discriminator: ReadonlyUint8Array;
  freezeAuthority: Operation;
  conditions: Option<Array<Condition>>;
};

export type UpdateWhitelistV2InstructionDataArgs = {
  freezeAuthority: OperationArgs;
  conditions: OptionOrNullable<Array<ConditionArgs>>;
};

export function getUpdateWhitelistV2InstructionDataEncoder(): Encoder<UpdateWhitelistV2InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['freezeAuthority', getOperationEncoder()],
      ['conditions', getOptionEncoder(getArrayEncoder(getConditionEncoder()))],
    ]),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([184, 188, 157, 214, 205, 49, 74, 226]),
    })
  );
}

export function getUpdateWhitelistV2InstructionDataDecoder(): Decoder<UpdateWhitelistV2InstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['freezeAuthority', getOperationDecoder()],
    ['conditions', getOptionDecoder(getArrayDecoder(getConditionDecoder()))],
  ]);
}

export function getUpdateWhitelistV2InstructionDataCodec(): Codec<
  UpdateWhitelistV2InstructionDataArgs,
  UpdateWhitelistV2InstructionData
> {
  return combineCodec(
    getUpdateWhitelistV2InstructionDataEncoder(),
    getUpdateWhitelistV2InstructionDataDecoder()
  );
}

export type UpdateWhitelistV2Input<
  TAccountPayer extends string = string,
  TAccountUpdateAuthority extends string = string,
  TAccountNewUpdateAuthority extends string = string,
  TAccountWhitelist extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** Rent payer if reallocating the WhitelistV2 account to include more conditions. */
  payer: TransactionSigner<TAccountPayer>;
  /** The current update authority. */
  updateAuthority: TransactionSigner<TAccountUpdateAuthority>;
  newUpdateAuthority?: TransactionSigner<TAccountNewUpdateAuthority>;
  /** The WhitelistV2 account to update. */
  whitelist: Address<TAccountWhitelist>;
  /** The Solana system program. */
  systemProgram?: Address<TAccountSystemProgram>;
  freezeAuthority: UpdateWhitelistV2InstructionDataArgs['freezeAuthority'];
  conditions: UpdateWhitelistV2InstructionDataArgs['conditions'];
};

export function getUpdateWhitelistV2Instruction<
  TAccountPayer extends string,
  TAccountUpdateAuthority extends string,
  TAccountNewUpdateAuthority extends string,
  TAccountWhitelist extends string,
  TAccountSystemProgram extends string,
>(
  input: UpdateWhitelistV2Input<
    TAccountPayer,
    TAccountUpdateAuthority,
    TAccountNewUpdateAuthority,
    TAccountWhitelist,
    TAccountSystemProgram
  >
): UpdateWhitelistV2Instruction<
  typeof TENSOR_WHITELIST_PROGRAM_ADDRESS,
  TAccountPayer,
  TAccountUpdateAuthority,
  TAccountNewUpdateAuthority,
  TAccountWhitelist,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = TENSOR_WHITELIST_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    updateAuthority: {
      value: input.updateAuthority ?? null,
      isWritable: false,
    },
    newUpdateAuthority: {
      value: input.newUpdateAuthority ?? null,
      isWritable: false,
    },
    whitelist: { value: input.whitelist ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.updateAuthority),
      getAccountMeta(accounts.newUpdateAuthority),
      getAccountMeta(accounts.whitelist),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getUpdateWhitelistV2InstructionDataEncoder().encode(
      args as UpdateWhitelistV2InstructionDataArgs
    ),
  } as UpdateWhitelistV2Instruction<
    typeof TENSOR_WHITELIST_PROGRAM_ADDRESS,
    TAccountPayer,
    TAccountUpdateAuthority,
    TAccountNewUpdateAuthority,
    TAccountWhitelist,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedUpdateWhitelistV2Instruction<
  TProgram extends string = typeof TENSOR_WHITELIST_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Rent payer if reallocating the WhitelistV2 account to include more conditions. */
    payer: TAccountMetas[0];
    /** The current update authority. */
    updateAuthority: TAccountMetas[1];
    newUpdateAuthority?: TAccountMetas[2] | undefined;
    /** The WhitelistV2 account to update. */
    whitelist: TAccountMetas[3];
    /** The Solana system program. */
    systemProgram: TAccountMetas[4];
  };
  data: UpdateWhitelistV2InstructionData;
};

export function parseUpdateWhitelistV2Instruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedUpdateWhitelistV2Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === TENSOR_WHITELIST_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      updateAuthority: getNextAccount(),
      newUpdateAuthority: getNextOptionalAccount(),
      whitelist: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getUpdateWhitelistV2InstructionDataDecoder().decode(instruction.data),
  };
}
