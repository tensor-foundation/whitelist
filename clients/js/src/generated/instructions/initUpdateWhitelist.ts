/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { findAuthorityPda, findWhitelistPda } from '../pdas';
import { TENSOR_WHITELIST_PROGRAM_ADDRESS } from '../programs';
import {
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export type InitUpdateWhitelistInstruction<
  TProgram extends string = typeof TENSOR_WHITELIST_PROGRAM_ADDRESS,
  TAccountWhitelist extends string | IAccountMeta<string> = string,
  TAccountWhitelistAuthority extends string | IAccountMeta<string> = string,
  TAccountCosigner extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountWhitelist extends string
        ? WritableAccount<TAccountWhitelist>
        : TAccountWhitelist,
      TAccountWhitelistAuthority extends string
        ? ReadonlyAccount<TAccountWhitelistAuthority>
        : TAccountWhitelistAuthority,
      TAccountCosigner extends string
        ? WritableSignerAccount<TAccountCosigner> &
            IAccountSignerMeta<TAccountCosigner>
        : TAccountCosigner,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitUpdateWhitelistInstructionData = {
  discriminator: ReadonlyUint8Array;
  uuid: ReadonlyUint8Array;
  rootHash: Option<ReadonlyUint8Array>;
  name: Option<ReadonlyUint8Array>;
  voc: Option<Address>;
  fvc: Option<Address>;
};

export type InitUpdateWhitelistInstructionDataArgs = {
  uuid: ReadonlyUint8Array;
  rootHash: OptionOrNullable<ReadonlyUint8Array>;
  name: OptionOrNullable<ReadonlyUint8Array>;
  voc: OptionOrNullable<Address>;
  fvc: OptionOrNullable<Address>;
};

export function getInitUpdateWhitelistInstructionDataEncoder(): Encoder<InitUpdateWhitelistInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['uuid', fixEncoderSize(getBytesEncoder(), 32)],
      ['rootHash', getOptionEncoder(fixEncoderSize(getBytesEncoder(), 32))],
      ['name', getOptionEncoder(fixEncoderSize(getBytesEncoder(), 32))],
      ['voc', getOptionEncoder(getAddressEncoder())],
      ['fvc', getOptionEncoder(getAddressEncoder())],
    ]),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([255, 1, 192, 134, 111, 49, 212, 131]),
    })
  );
}

export function getInitUpdateWhitelistInstructionDataDecoder(): Decoder<InitUpdateWhitelistInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['uuid', fixDecoderSize(getBytesDecoder(), 32)],
    ['rootHash', getOptionDecoder(fixDecoderSize(getBytesDecoder(), 32))],
    ['name', getOptionDecoder(fixDecoderSize(getBytesDecoder(), 32))],
    ['voc', getOptionDecoder(getAddressDecoder())],
    ['fvc', getOptionDecoder(getAddressDecoder())],
  ]);
}

export function getInitUpdateWhitelistInstructionDataCodec(): Codec<
  InitUpdateWhitelistInstructionDataArgs,
  InitUpdateWhitelistInstructionData
> {
  return combineCodec(
    getInitUpdateWhitelistInstructionDataEncoder(),
    getInitUpdateWhitelistInstructionDataDecoder()
  );
}

export type InitUpdateWhitelistAsyncInput<
  TAccountWhitelist extends string = string,
  TAccountWhitelistAuthority extends string = string,
  TAccountCosigner extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  whitelist?: Address<TAccountWhitelist>;
  /**
   * there can only be 1 whitelist authority (due to seeds),
   * and we're checking that 1)the correct cosigner is present on it, and 2)is a signer
   */
  whitelistAuthority?: Address<TAccountWhitelistAuthority>;
  /** only cosigner has to sign for unfrozen, for frozen owner also has to sign */
  cosigner: TransactionSigner<TAccountCosigner>;
  systemProgram?: Address<TAccountSystemProgram>;
  uuid: InitUpdateWhitelistInstructionDataArgs['uuid'];
  rootHash: InitUpdateWhitelistInstructionDataArgs['rootHash'];
  name: InitUpdateWhitelistInstructionDataArgs['name'];
  voc: InitUpdateWhitelistInstructionDataArgs['voc'];
  fvc: InitUpdateWhitelistInstructionDataArgs['fvc'];
};

export async function getInitUpdateWhitelistInstructionAsync<
  TAccountWhitelist extends string,
  TAccountWhitelistAuthority extends string,
  TAccountCosigner extends string,
  TAccountSystemProgram extends string,
>(
  input: InitUpdateWhitelistAsyncInput<
    TAccountWhitelist,
    TAccountWhitelistAuthority,
    TAccountCosigner,
    TAccountSystemProgram
  >
): Promise<
  InitUpdateWhitelistInstruction<
    typeof TENSOR_WHITELIST_PROGRAM_ADDRESS,
    TAccountWhitelist,
    TAccountWhitelistAuthority,
    TAccountCosigner,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = TENSOR_WHITELIST_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    whitelist: { value: input.whitelist ?? null, isWritable: true },
    whitelistAuthority: {
      value: input.whitelistAuthority ?? null,
      isWritable: false,
    },
    cosigner: { value: input.cosigner ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.whitelist.value) {
    accounts.whitelist.value = await findWhitelistPda({
      uuid: expectSome(args.uuid),
    });
  }
  if (!accounts.whitelistAuthority.value) {
    accounts.whitelistAuthority.value = await findAuthorityPda();
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.whitelist),
      getAccountMeta(accounts.whitelistAuthority),
      getAccountMeta(accounts.cosigner),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitUpdateWhitelistInstructionDataEncoder().encode(
      args as InitUpdateWhitelistInstructionDataArgs
    ),
  } as InitUpdateWhitelistInstruction<
    typeof TENSOR_WHITELIST_PROGRAM_ADDRESS,
    TAccountWhitelist,
    TAccountWhitelistAuthority,
    TAccountCosigner,
    TAccountSystemProgram
  >;

  return instruction;
}

export type InitUpdateWhitelistInput<
  TAccountWhitelist extends string = string,
  TAccountWhitelistAuthority extends string = string,
  TAccountCosigner extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  whitelist: Address<TAccountWhitelist>;
  /**
   * there can only be 1 whitelist authority (due to seeds),
   * and we're checking that 1)the correct cosigner is present on it, and 2)is a signer
   */
  whitelistAuthority: Address<TAccountWhitelistAuthority>;
  /** only cosigner has to sign for unfrozen, for frozen owner also has to sign */
  cosigner: TransactionSigner<TAccountCosigner>;
  systemProgram?: Address<TAccountSystemProgram>;
  uuid: InitUpdateWhitelistInstructionDataArgs['uuid'];
  rootHash: InitUpdateWhitelistInstructionDataArgs['rootHash'];
  name: InitUpdateWhitelistInstructionDataArgs['name'];
  voc: InitUpdateWhitelistInstructionDataArgs['voc'];
  fvc: InitUpdateWhitelistInstructionDataArgs['fvc'];
};

export function getInitUpdateWhitelistInstruction<
  TAccountWhitelist extends string,
  TAccountWhitelistAuthority extends string,
  TAccountCosigner extends string,
  TAccountSystemProgram extends string,
>(
  input: InitUpdateWhitelistInput<
    TAccountWhitelist,
    TAccountWhitelistAuthority,
    TAccountCosigner,
    TAccountSystemProgram
  >
): InitUpdateWhitelistInstruction<
  typeof TENSOR_WHITELIST_PROGRAM_ADDRESS,
  TAccountWhitelist,
  TAccountWhitelistAuthority,
  TAccountCosigner,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = TENSOR_WHITELIST_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    whitelist: { value: input.whitelist ?? null, isWritable: true },
    whitelistAuthority: {
      value: input.whitelistAuthority ?? null,
      isWritable: false,
    },
    cosigner: { value: input.cosigner ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.whitelist),
      getAccountMeta(accounts.whitelistAuthority),
      getAccountMeta(accounts.cosigner),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitUpdateWhitelistInstructionDataEncoder().encode(
      args as InitUpdateWhitelistInstructionDataArgs
    ),
  } as InitUpdateWhitelistInstruction<
    typeof TENSOR_WHITELIST_PROGRAM_ADDRESS,
    TAccountWhitelist,
    TAccountWhitelistAuthority,
    TAccountCosigner,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedInitUpdateWhitelistInstruction<
  TProgram extends string = typeof TENSOR_WHITELIST_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    whitelist: TAccountMetas[0];
    /**
     * there can only be 1 whitelist authority (due to seeds),
     * and we're checking that 1)the correct cosigner is present on it, and 2)is a signer
     */

    whitelistAuthority: TAccountMetas[1];
    /** only cosigner has to sign for unfrozen, for frozen owner also has to sign */
    cosigner: TAccountMetas[2];
    systemProgram: TAccountMetas[3];
  };
  data: InitUpdateWhitelistInstructionData;
};

export function parseInitUpdateWhitelistInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedInitUpdateWhitelistInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      whitelist: getNextAccount(),
      whitelistAuthority: getNextAccount(),
      cosigner: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitUpdateWhitelistInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
