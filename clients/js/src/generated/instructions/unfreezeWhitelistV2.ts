/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/web3.js';
import { TENSOR_WHITELIST_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export type UnfreezeWhitelistV2Instruction<
  TProgram extends string = typeof TENSOR_WHITELIST_PROGRAM_ADDRESS,
  TAccountFreezeAuthority extends string | IAccountMeta<string> = string,
  TAccountWhitelist extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountFreezeAuthority extends string
        ? ReadonlySignerAccount<TAccountFreezeAuthority> &
            IAccountSignerMeta<TAccountFreezeAuthority>
        : TAccountFreezeAuthority,
      TAccountWhitelist extends string
        ? WritableAccount<TAccountWhitelist>
        : TAccountWhitelist,
      ...TRemainingAccounts,
    ]
  >;

export type UnfreezeWhitelistV2InstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type UnfreezeWhitelistV2InstructionDataArgs = {};

export function getUnfreezeWhitelistV2InstructionDataEncoder(): Encoder<UnfreezeWhitelistV2InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([51, 105, 214, 84, 252, 188, 26, 1]),
    })
  );
}

export function getUnfreezeWhitelistV2InstructionDataDecoder(): Decoder<UnfreezeWhitelistV2InstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getUnfreezeWhitelistV2InstructionDataCodec(): Codec<
  UnfreezeWhitelistV2InstructionDataArgs,
  UnfreezeWhitelistV2InstructionData
> {
  return combineCodec(
    getUnfreezeWhitelistV2InstructionDataEncoder(),
    getUnfreezeWhitelistV2InstructionDataDecoder()
  );
}

export type UnfreezeWhitelistV2Input<
  TAccountFreezeAuthority extends string = string,
  TAccountWhitelist extends string = string,
> = {
  freezeAuthority: TransactionSigner<TAccountFreezeAuthority>;
  whitelist: Address<TAccountWhitelist>;
};

export function getUnfreezeWhitelistV2Instruction<
  TAccountFreezeAuthority extends string,
  TAccountWhitelist extends string,
>(
  input: UnfreezeWhitelistV2Input<TAccountFreezeAuthority, TAccountWhitelist>
): UnfreezeWhitelistV2Instruction<
  typeof TENSOR_WHITELIST_PROGRAM_ADDRESS,
  TAccountFreezeAuthority,
  TAccountWhitelist
> {
  // Program address.
  const programAddress = TENSOR_WHITELIST_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    freezeAuthority: {
      value: input.freezeAuthority ?? null,
      isWritable: false,
    },
    whitelist: { value: input.whitelist ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.freezeAuthority),
      getAccountMeta(accounts.whitelist),
    ],
    programAddress,
    data: getUnfreezeWhitelistV2InstructionDataEncoder().encode({}),
  } as UnfreezeWhitelistV2Instruction<
    typeof TENSOR_WHITELIST_PROGRAM_ADDRESS,
    TAccountFreezeAuthority,
    TAccountWhitelist
  >;

  return instruction;
}

export type ParsedUnfreezeWhitelistV2Instruction<
  TProgram extends string = typeof TENSOR_WHITELIST_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    freezeAuthority: TAccountMetas[0];
    whitelist: TAccountMetas[1];
  };
  data: UnfreezeWhitelistV2InstructionData;
};

export function parseUnfreezeWhitelistV2Instruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedUnfreezeWhitelistV2Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      freezeAuthority: getNextAccount(),
      whitelist: getNextAccount(),
    },
    data: getUnfreezeWhitelistV2InstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
