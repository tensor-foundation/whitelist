/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Address } from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  mapEncoder,
} from '@solana/codecs-core';
import {
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs-data-structures';
import { getU8Decoder, getU8Encoder } from '@solana/codecs-numbers';
import {
  AccountRole,
  IAccountMeta,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  ReadonlySignerAccount,
  WritableAccount,
} from '@solana/instructions';
import { IAccountSignerMeta, TransactionSigner } from '@solana/signers';
import {
  ResolvedAccount,
  accountMetaWithDefault,
  getAccountMetasWithSigners,
} from '../shared';

export type UnfreezeWhitelistV2Instruction<
  TProgram extends string = 'TL1ST2iRBzuGTqLn1KXnGdSnEow62BzPnGiqyRXhWtW',
  TAccountFreezeAuthority extends string | IAccountMeta<string> = string,
  TAccountWhitelist extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountFreezeAuthority extends string
        ? ReadonlySignerAccount<TAccountFreezeAuthority>
        : TAccountFreezeAuthority,
      TAccountWhitelist extends string
        ? WritableAccount<TAccountWhitelist>
        : TAccountWhitelist,
      ...TRemainingAccounts
    ]
  >;

export type UnfreezeWhitelistV2InstructionWithSigners<
  TProgram extends string = 'TL1ST2iRBzuGTqLn1KXnGdSnEow62BzPnGiqyRXhWtW',
  TAccountFreezeAuthority extends string | IAccountMeta<string> = string,
  TAccountWhitelist extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountFreezeAuthority extends string
        ? ReadonlySignerAccount<TAccountFreezeAuthority> &
            IAccountSignerMeta<TAccountFreezeAuthority>
        : TAccountFreezeAuthority,
      TAccountWhitelist extends string
        ? WritableAccount<TAccountWhitelist>
        : TAccountWhitelist,
      ...TRemainingAccounts
    ]
  >;

export type UnfreezeWhitelistV2InstructionData = {
  discriminator: Array<number>;
};

export type UnfreezeWhitelistV2InstructionDataArgs = {};

export function getUnfreezeWhitelistV2InstructionDataEncoder() {
  return mapEncoder(
    getStructEncoder<{ discriminator: Array<number> }>([
      ['discriminator', getArrayEncoder(getU8Encoder(), { size: 8 })],
    ]),
    (value) => ({
      ...value,
      discriminator: [51, 105, 214, 84, 252, 188, 26, 1],
    })
  ) satisfies Encoder<UnfreezeWhitelistV2InstructionDataArgs>;
}

export function getUnfreezeWhitelistV2InstructionDataDecoder() {
  return getStructDecoder<UnfreezeWhitelistV2InstructionData>([
    ['discriminator', getArrayDecoder(getU8Decoder(), { size: 8 })],
  ]) satisfies Decoder<UnfreezeWhitelistV2InstructionData>;
}

export function getUnfreezeWhitelistV2InstructionDataCodec(): Codec<
  UnfreezeWhitelistV2InstructionDataArgs,
  UnfreezeWhitelistV2InstructionData
> {
  return combineCodec(
    getUnfreezeWhitelistV2InstructionDataEncoder(),
    getUnfreezeWhitelistV2InstructionDataDecoder()
  );
}

export type UnfreezeWhitelistV2Input<
  TAccountFreezeAuthority extends string,
  TAccountWhitelist extends string
> = {
  freezeAuthority: Address<TAccountFreezeAuthority>;
  whitelist: Address<TAccountWhitelist>;
};

export type UnfreezeWhitelistV2InputWithSigners<
  TAccountFreezeAuthority extends string,
  TAccountWhitelist extends string
> = {
  freezeAuthority: TransactionSigner<TAccountFreezeAuthority>;
  whitelist: Address<TAccountWhitelist>;
};

export function getUnfreezeWhitelistV2Instruction<
  TAccountFreezeAuthority extends string,
  TAccountWhitelist extends string,
  TProgram extends string = 'TL1ST2iRBzuGTqLn1KXnGdSnEow62BzPnGiqyRXhWtW'
>(
  input: UnfreezeWhitelistV2InputWithSigners<
    TAccountFreezeAuthority,
    TAccountWhitelist
  >
): UnfreezeWhitelistV2InstructionWithSigners<
  TProgram,
  TAccountFreezeAuthority,
  TAccountWhitelist
>;
export function getUnfreezeWhitelistV2Instruction<
  TAccountFreezeAuthority extends string,
  TAccountWhitelist extends string,
  TProgram extends string = 'TL1ST2iRBzuGTqLn1KXnGdSnEow62BzPnGiqyRXhWtW'
>(
  input: UnfreezeWhitelistV2Input<TAccountFreezeAuthority, TAccountWhitelist>
): UnfreezeWhitelistV2Instruction<
  TProgram,
  TAccountFreezeAuthority,
  TAccountWhitelist
>;
export function getUnfreezeWhitelistV2Instruction<
  TAccountFreezeAuthority extends string,
  TAccountWhitelist extends string,
  TProgram extends string = 'TL1ST2iRBzuGTqLn1KXnGdSnEow62BzPnGiqyRXhWtW'
>(
  input: UnfreezeWhitelistV2Input<TAccountFreezeAuthority, TAccountWhitelist>
): IInstruction {
  // Program address.
  const programAddress =
    'TL1ST2iRBzuGTqLn1KXnGdSnEow62BzPnGiqyRXhWtW' as Address<'TL1ST2iRBzuGTqLn1KXnGdSnEow62BzPnGiqyRXhWtW'>;

  // Original accounts.
  type AccountMetas = Parameters<
    typeof getUnfreezeWhitelistV2InstructionRaw<
      TProgram,
      TAccountFreezeAuthority,
      TAccountWhitelist
    >
  >[0];
  const accounts: Record<keyof AccountMetas, ResolvedAccount> = {
    freezeAuthority: {
      value: input.freezeAuthority ?? null,
      isWritable: false,
    },
    whitelist: { value: input.whitelist ?? null, isWritable: true },
  };

  // Get account metas and signers.
  const accountMetas = getAccountMetasWithSigners(
    accounts,
    'programId',
    programAddress
  );

  const instruction = getUnfreezeWhitelistV2InstructionRaw(
    accountMetas as Record<keyof AccountMetas, IAccountMeta>,
    programAddress
  );

  return instruction;
}

export function getUnfreezeWhitelistV2InstructionRaw<
  TProgram extends string = 'TL1ST2iRBzuGTqLn1KXnGdSnEow62BzPnGiqyRXhWtW',
  TAccountFreezeAuthority extends string | IAccountMeta<string> = string,
  TAccountWhitelist extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
>(
  accounts: {
    freezeAuthority: TAccountFreezeAuthority extends string
      ? Address<TAccountFreezeAuthority>
      : TAccountFreezeAuthority;
    whitelist: TAccountWhitelist extends string
      ? Address<TAccountWhitelist>
      : TAccountWhitelist;
  },
  programAddress: Address<TProgram> = 'TL1ST2iRBzuGTqLn1KXnGdSnEow62BzPnGiqyRXhWtW' as Address<TProgram>,
  remainingAccounts?: TRemainingAccounts
) {
  return {
    accounts: [
      accountMetaWithDefault(
        accounts.freezeAuthority,
        AccountRole.READONLY_SIGNER
      ),
      accountMetaWithDefault(accounts.whitelist, AccountRole.WRITABLE),
      ...(remainingAccounts ?? []),
    ],
    data: getUnfreezeWhitelistV2InstructionDataEncoder().encode({}),
    programAddress,
  } as UnfreezeWhitelistV2Instruction<
    TProgram,
    TAccountFreezeAuthority,
    TAccountWhitelist,
    TRemainingAccounts
  >;
}

export type ParsedUnfreezeWhitelistV2Instruction<
  TProgram extends string = 'TL1ST2iRBzuGTqLn1KXnGdSnEow62BzPnGiqyRXhWtW',
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]
> = {
  programAddress: Address<TProgram>;
  accounts: {
    freezeAuthority: TAccountMetas[0];
    whitelist: TAccountMetas[1];
  };
  data: UnfreezeWhitelistV2InstructionData;
};

export function parseUnfreezeWhitelistV2Instruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[]
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedUnfreezeWhitelistV2Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      freezeAuthority: getNextAccount(),
      whitelist: getNextAccount(),
    },
    data: getUnfreezeWhitelistV2InstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
