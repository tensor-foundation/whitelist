/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { findAuthorityPda } from '../pdas';
import { TENSOR_WHITELIST_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export type ReallocAuthorityInstruction<
  TProgram extends string = typeof TENSOR_WHITELIST_PROGRAM_ADDRESS,
  TAccountWhitelistAuthority extends string | IAccountMeta<string> = string,
  TAccountCosigner extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountWhitelistAuthority extends string
        ? WritableAccount<TAccountWhitelistAuthority>
        : TAccountWhitelistAuthority,
      TAccountCosigner extends string
        ? WritableSignerAccount<TAccountCosigner> &
            IAccountSignerMeta<TAccountCosigner>
        : TAccountCosigner,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ReallocAuthorityInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type ReallocAuthorityInstructionDataArgs = {};

export function getReallocAuthorityInstructionDataEncoder(): Encoder<ReallocAuthorityInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([128, 120, 16, 197, 85, 34, 2, 91]),
    })
  );
}

export function getReallocAuthorityInstructionDataDecoder(): Decoder<ReallocAuthorityInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getReallocAuthorityInstructionDataCodec(): Codec<
  ReallocAuthorityInstructionDataArgs,
  ReallocAuthorityInstructionData
> {
  return combineCodec(
    getReallocAuthorityInstructionDataEncoder(),
    getReallocAuthorityInstructionDataDecoder()
  );
}

export type ReallocAuthorityAsyncInput<
  TAccountWhitelistAuthority extends string = string,
  TAccountCosigner extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /**
   * there can only be 1 whitelist authority (due to seeds),
   * and we're checking that 1)the correct cosigner is present on it, and 2)is a signer
   */
  whitelistAuthority?: Address<TAccountWhitelistAuthority>;
  cosigner: TransactionSigner<TAccountCosigner>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export async function getReallocAuthorityInstructionAsync<
  TAccountWhitelistAuthority extends string,
  TAccountCosigner extends string,
  TAccountSystemProgram extends string,
>(
  input: ReallocAuthorityAsyncInput<
    TAccountWhitelistAuthority,
    TAccountCosigner,
    TAccountSystemProgram
  >
): Promise<
  ReallocAuthorityInstruction<
    typeof TENSOR_WHITELIST_PROGRAM_ADDRESS,
    TAccountWhitelistAuthority,
    TAccountCosigner,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = TENSOR_WHITELIST_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    whitelistAuthority: {
      value: input.whitelistAuthority ?? null,
      isWritable: true,
    },
    cosigner: { value: input.cosigner ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.whitelistAuthority.value) {
    accounts.whitelistAuthority.value = await findAuthorityPda();
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.whitelistAuthority),
      getAccountMeta(accounts.cosigner),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getReallocAuthorityInstructionDataEncoder().encode({}),
  } as ReallocAuthorityInstruction<
    typeof TENSOR_WHITELIST_PROGRAM_ADDRESS,
    TAccountWhitelistAuthority,
    TAccountCosigner,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ReallocAuthorityInput<
  TAccountWhitelistAuthority extends string = string,
  TAccountCosigner extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /**
   * there can only be 1 whitelist authority (due to seeds),
   * and we're checking that 1)the correct cosigner is present on it, and 2)is a signer
   */
  whitelistAuthority: Address<TAccountWhitelistAuthority>;
  cosigner: TransactionSigner<TAccountCosigner>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getReallocAuthorityInstruction<
  TAccountWhitelistAuthority extends string,
  TAccountCosigner extends string,
  TAccountSystemProgram extends string,
>(
  input: ReallocAuthorityInput<
    TAccountWhitelistAuthority,
    TAccountCosigner,
    TAccountSystemProgram
  >
): ReallocAuthorityInstruction<
  typeof TENSOR_WHITELIST_PROGRAM_ADDRESS,
  TAccountWhitelistAuthority,
  TAccountCosigner,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = TENSOR_WHITELIST_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    whitelistAuthority: {
      value: input.whitelistAuthority ?? null,
      isWritable: true,
    },
    cosigner: { value: input.cosigner ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.whitelistAuthority),
      getAccountMeta(accounts.cosigner),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getReallocAuthorityInstructionDataEncoder().encode({}),
  } as ReallocAuthorityInstruction<
    typeof TENSOR_WHITELIST_PROGRAM_ADDRESS,
    TAccountWhitelistAuthority,
    TAccountCosigner,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedReallocAuthorityInstruction<
  TProgram extends string = typeof TENSOR_WHITELIST_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /**
     * there can only be 1 whitelist authority (due to seeds),
     * and we're checking that 1)the correct cosigner is present on it, and 2)is a signer
     */

    whitelistAuthority: TAccountMetas[0];
    cosigner: TAccountMetas[1];
    systemProgram: TAccountMetas[2];
  };
  data: ReallocAuthorityInstructionData;
};

export function parseReallocAuthorityInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedReallocAuthorityInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      whitelistAuthority: getNextAccount(),
      cosigner: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getReallocAuthorityInstructionDataDecoder().decode(instruction.data),
  };
}
