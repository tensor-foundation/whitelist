/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Address,
  getAddressDecoder,
  getAddressEncoder,
} from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  mapEncoder,
} from '@solana/codecs-core';
import {
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs-data-structures';
import { getU8Decoder, getU8Encoder } from '@solana/codecs-numbers';
import {
  AccountRole,
  IAccountMeta,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  WritableAccount,
  WritableSignerAccount,
} from '@solana/instructions';
import {
  Option,
  OptionOrNullable,
  getOptionDecoder,
  getOptionEncoder,
} from '@solana/options';
import { IAccountSignerMeta, TransactionSigner } from '@solana/signers';
import { findWhitelistPda } from '../pdas';
import {
  ResolvedAccount,
  accountMetaWithDefault,
  expectSome,
  getAccountMetasWithSigners,
} from '../shared';
import {
  Condition,
  ConditionArgs,
  getConditionDecoder,
  getConditionEncoder,
} from '../types';

export type CreateWhitelistV2Instruction<
  TProgram extends string = 'TL1ST2iRBzuGTqLn1KXnGdSnEow62BzPnGiqyRXhWtW',
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountUpdateAuthority extends string | IAccountMeta<string> = string,
  TAccountNamespace extends string | IAccountMeta<string> = string,
  TAccountWhitelist extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer>
        : TAccountPayer,
      TAccountUpdateAuthority extends string
        ? WritableSignerAccount<TAccountUpdateAuthority>
        : TAccountUpdateAuthority,
      TAccountNamespace extends string
        ? ReadonlySignerAccount<TAccountNamespace>
        : TAccountNamespace,
      TAccountWhitelist extends string
        ? WritableAccount<TAccountWhitelist>
        : TAccountWhitelist,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts
    ]
  >;

export type CreateWhitelistV2InstructionWithSigners<
  TProgram extends string = 'TL1ST2iRBzuGTqLn1KXnGdSnEow62BzPnGiqyRXhWtW',
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountUpdateAuthority extends string | IAccountMeta<string> = string,
  TAccountNamespace extends string | IAccountMeta<string> = string,
  TAccountWhitelist extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountUpdateAuthority extends string
        ? WritableSignerAccount<TAccountUpdateAuthority> &
            IAccountSignerMeta<TAccountUpdateAuthority>
        : TAccountUpdateAuthority,
      TAccountNamespace extends string
        ? ReadonlySignerAccount<TAccountNamespace> &
            IAccountSignerMeta<TAccountNamespace>
        : TAccountNamespace,
      TAccountWhitelist extends string
        ? WritableAccount<TAccountWhitelist>
        : TAccountWhitelist,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts
    ]
  >;

export type CreateWhitelistV2InstructionData = {
  discriminator: Array<number>;
  uuid: Uint8Array;
  freezeAuthority: Option<Address>;
  conditions: Array<Condition>;
};

export type CreateWhitelistV2InstructionDataArgs = {
  uuid: Uint8Array;
  freezeAuthority: OptionOrNullable<Address>;
  conditions: Array<ConditionArgs>;
};

export function getCreateWhitelistV2InstructionDataEncoder() {
  return mapEncoder(
    getStructEncoder<{
      discriminator: Array<number>;
      uuid: Uint8Array;
      freezeAuthority: OptionOrNullable<Address>;
      conditions: Array<ConditionArgs>;
    }>([
      ['discriminator', getArrayEncoder(getU8Encoder(), { size: 8 })],
      ['uuid', getBytesEncoder({ size: 32 })],
      ['freezeAuthority', getOptionEncoder(getAddressEncoder())],
      ['conditions', getArrayEncoder(getConditionEncoder())],
    ]),
    (value) => ({
      ...value,
      discriminator: [31, 207, 213, 77, 105, 13, 127, 98],
    })
  ) satisfies Encoder<CreateWhitelistV2InstructionDataArgs>;
}

export function getCreateWhitelistV2InstructionDataDecoder() {
  return getStructDecoder<CreateWhitelistV2InstructionData>([
    ['discriminator', getArrayDecoder(getU8Decoder(), { size: 8 })],
    ['uuid', getBytesDecoder({ size: 32 })],
    ['freezeAuthority', getOptionDecoder(getAddressDecoder())],
    ['conditions', getArrayDecoder(getConditionDecoder())],
  ]) satisfies Decoder<CreateWhitelistV2InstructionData>;
}

export function getCreateWhitelistV2InstructionDataCodec(): Codec<
  CreateWhitelistV2InstructionDataArgs,
  CreateWhitelistV2InstructionData
> {
  return combineCodec(
    getCreateWhitelistV2InstructionDataEncoder(),
    getCreateWhitelistV2InstructionDataDecoder()
  );
}

export type CreateWhitelistV2AsyncInput<
  TAccountPayer extends string,
  TAccountUpdateAuthority extends string,
  TAccountNamespace extends string,
  TAccountWhitelist extends string,
  TAccountSystemProgram extends string
> = {
  payer: Address<TAccountPayer>;
  updateAuthority: Address<TAccountUpdateAuthority>;
  namespace: Address<TAccountNamespace>;
  whitelist?: Address<TAccountWhitelist>;
  systemProgram?: Address<TAccountSystemProgram>;
  uuid: CreateWhitelistV2InstructionDataArgs['uuid'];
  freezeAuthority: CreateWhitelistV2InstructionDataArgs['freezeAuthority'];
  conditions: CreateWhitelistV2InstructionDataArgs['conditions'];
};

export type CreateWhitelistV2AsyncInputWithSigners<
  TAccountPayer extends string,
  TAccountUpdateAuthority extends string,
  TAccountNamespace extends string,
  TAccountWhitelist extends string,
  TAccountSystemProgram extends string
> = {
  payer: TransactionSigner<TAccountPayer>;
  updateAuthority: TransactionSigner<TAccountUpdateAuthority>;
  namespace: TransactionSigner<TAccountNamespace>;
  whitelist?: Address<TAccountWhitelist>;
  systemProgram?: Address<TAccountSystemProgram>;
  uuid: CreateWhitelistV2InstructionDataArgs['uuid'];
  freezeAuthority: CreateWhitelistV2InstructionDataArgs['freezeAuthority'];
  conditions: CreateWhitelistV2InstructionDataArgs['conditions'];
};

export async function getCreateWhitelistV2InstructionAsync<
  TAccountPayer extends string,
  TAccountUpdateAuthority extends string,
  TAccountNamespace extends string,
  TAccountWhitelist extends string,
  TAccountSystemProgram extends string,
  TProgram extends string = 'TL1ST2iRBzuGTqLn1KXnGdSnEow62BzPnGiqyRXhWtW'
>(
  input: CreateWhitelistV2AsyncInputWithSigners<
    TAccountPayer,
    TAccountUpdateAuthority,
    TAccountNamespace,
    TAccountWhitelist,
    TAccountSystemProgram
  >
): Promise<
  CreateWhitelistV2InstructionWithSigners<
    TProgram,
    TAccountPayer,
    TAccountUpdateAuthority,
    TAccountNamespace,
    TAccountWhitelist,
    TAccountSystemProgram
  >
>;
export async function getCreateWhitelistV2InstructionAsync<
  TAccountPayer extends string,
  TAccountUpdateAuthority extends string,
  TAccountNamespace extends string,
  TAccountWhitelist extends string,
  TAccountSystemProgram extends string,
  TProgram extends string = 'TL1ST2iRBzuGTqLn1KXnGdSnEow62BzPnGiqyRXhWtW'
>(
  input: CreateWhitelistV2AsyncInput<
    TAccountPayer,
    TAccountUpdateAuthority,
    TAccountNamespace,
    TAccountWhitelist,
    TAccountSystemProgram
  >
): Promise<
  CreateWhitelistV2Instruction<
    TProgram,
    TAccountPayer,
    TAccountUpdateAuthority,
    TAccountNamespace,
    TAccountWhitelist,
    TAccountSystemProgram
  >
>;
export async function getCreateWhitelistV2InstructionAsync<
  TAccountPayer extends string,
  TAccountUpdateAuthority extends string,
  TAccountNamespace extends string,
  TAccountWhitelist extends string,
  TAccountSystemProgram extends string,
  TProgram extends string = 'TL1ST2iRBzuGTqLn1KXnGdSnEow62BzPnGiqyRXhWtW'
>(
  input: CreateWhitelistV2AsyncInput<
    TAccountPayer,
    TAccountUpdateAuthority,
    TAccountNamespace,
    TAccountWhitelist,
    TAccountSystemProgram
  >
): Promise<IInstruction> {
  // Program address.
  const programAddress =
    'TL1ST2iRBzuGTqLn1KXnGdSnEow62BzPnGiqyRXhWtW' as Address<'TL1ST2iRBzuGTqLn1KXnGdSnEow62BzPnGiqyRXhWtW'>;

  // Original accounts.
  type AccountMetas = Parameters<
    typeof getCreateWhitelistV2InstructionRaw<
      TProgram,
      TAccountPayer,
      TAccountUpdateAuthority,
      TAccountNamespace,
      TAccountWhitelist,
      TAccountSystemProgram
    >
  >[0];
  const accounts: Record<keyof AccountMetas, ResolvedAccount> = {
    payer: { value: input.payer ?? null, isWritable: true },
    updateAuthority: { value: input.updateAuthority ?? null, isWritable: true },
    namespace: { value: input.namespace ?? null, isWritable: false },
    whitelist: { value: input.whitelist ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.whitelist.value) {
    accounts.whitelist.value = await findWhitelistPda({
      uuid: expectSome(args.uuid),
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  // Get account metas and signers.
  const accountMetas = getAccountMetasWithSigners(
    accounts,
    'programId',
    programAddress
  );

  const instruction = getCreateWhitelistV2InstructionRaw(
    accountMetas as Record<keyof AccountMetas, IAccountMeta>,
    args as CreateWhitelistV2InstructionDataArgs,
    programAddress
  );

  return instruction;
}

export type CreateWhitelistV2Input<
  TAccountPayer extends string,
  TAccountUpdateAuthority extends string,
  TAccountNamespace extends string,
  TAccountWhitelist extends string,
  TAccountSystemProgram extends string
> = {
  payer: Address<TAccountPayer>;
  updateAuthority: Address<TAccountUpdateAuthority>;
  namespace: Address<TAccountNamespace>;
  whitelist: Address<TAccountWhitelist>;
  systemProgram?: Address<TAccountSystemProgram>;
  uuid: CreateWhitelistV2InstructionDataArgs['uuid'];
  freezeAuthority: CreateWhitelistV2InstructionDataArgs['freezeAuthority'];
  conditions: CreateWhitelistV2InstructionDataArgs['conditions'];
};

export type CreateWhitelistV2InputWithSigners<
  TAccountPayer extends string,
  TAccountUpdateAuthority extends string,
  TAccountNamespace extends string,
  TAccountWhitelist extends string,
  TAccountSystemProgram extends string
> = {
  payer: TransactionSigner<TAccountPayer>;
  updateAuthority: TransactionSigner<TAccountUpdateAuthority>;
  namespace: TransactionSigner<TAccountNamespace>;
  whitelist: Address<TAccountWhitelist>;
  systemProgram?: Address<TAccountSystemProgram>;
  uuid: CreateWhitelistV2InstructionDataArgs['uuid'];
  freezeAuthority: CreateWhitelistV2InstructionDataArgs['freezeAuthority'];
  conditions: CreateWhitelistV2InstructionDataArgs['conditions'];
};

export function getCreateWhitelistV2Instruction<
  TAccountPayer extends string,
  TAccountUpdateAuthority extends string,
  TAccountNamespace extends string,
  TAccountWhitelist extends string,
  TAccountSystemProgram extends string,
  TProgram extends string = 'TL1ST2iRBzuGTqLn1KXnGdSnEow62BzPnGiqyRXhWtW'
>(
  input: CreateWhitelistV2InputWithSigners<
    TAccountPayer,
    TAccountUpdateAuthority,
    TAccountNamespace,
    TAccountWhitelist,
    TAccountSystemProgram
  >
): CreateWhitelistV2InstructionWithSigners<
  TProgram,
  TAccountPayer,
  TAccountUpdateAuthority,
  TAccountNamespace,
  TAccountWhitelist,
  TAccountSystemProgram
>;
export function getCreateWhitelistV2Instruction<
  TAccountPayer extends string,
  TAccountUpdateAuthority extends string,
  TAccountNamespace extends string,
  TAccountWhitelist extends string,
  TAccountSystemProgram extends string,
  TProgram extends string = 'TL1ST2iRBzuGTqLn1KXnGdSnEow62BzPnGiqyRXhWtW'
>(
  input: CreateWhitelistV2Input<
    TAccountPayer,
    TAccountUpdateAuthority,
    TAccountNamespace,
    TAccountWhitelist,
    TAccountSystemProgram
  >
): CreateWhitelistV2Instruction<
  TProgram,
  TAccountPayer,
  TAccountUpdateAuthority,
  TAccountNamespace,
  TAccountWhitelist,
  TAccountSystemProgram
>;
export function getCreateWhitelistV2Instruction<
  TAccountPayer extends string,
  TAccountUpdateAuthority extends string,
  TAccountNamespace extends string,
  TAccountWhitelist extends string,
  TAccountSystemProgram extends string,
  TProgram extends string = 'TL1ST2iRBzuGTqLn1KXnGdSnEow62BzPnGiqyRXhWtW'
>(
  input: CreateWhitelistV2Input<
    TAccountPayer,
    TAccountUpdateAuthority,
    TAccountNamespace,
    TAccountWhitelist,
    TAccountSystemProgram
  >
): IInstruction {
  // Program address.
  const programAddress =
    'TL1ST2iRBzuGTqLn1KXnGdSnEow62BzPnGiqyRXhWtW' as Address<'TL1ST2iRBzuGTqLn1KXnGdSnEow62BzPnGiqyRXhWtW'>;

  // Original accounts.
  type AccountMetas = Parameters<
    typeof getCreateWhitelistV2InstructionRaw<
      TProgram,
      TAccountPayer,
      TAccountUpdateAuthority,
      TAccountNamespace,
      TAccountWhitelist,
      TAccountSystemProgram
    >
  >[0];
  const accounts: Record<keyof AccountMetas, ResolvedAccount> = {
    payer: { value: input.payer ?? null, isWritable: true },
    updateAuthority: { value: input.updateAuthority ?? null, isWritable: true },
    namespace: { value: input.namespace ?? null, isWritable: false },
    whitelist: { value: input.whitelist ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  // Get account metas and signers.
  const accountMetas = getAccountMetasWithSigners(
    accounts,
    'programId',
    programAddress
  );

  const instruction = getCreateWhitelistV2InstructionRaw(
    accountMetas as Record<keyof AccountMetas, IAccountMeta>,
    args as CreateWhitelistV2InstructionDataArgs,
    programAddress
  );

  return instruction;
}

export function getCreateWhitelistV2InstructionRaw<
  TProgram extends string = 'TL1ST2iRBzuGTqLn1KXnGdSnEow62BzPnGiqyRXhWtW',
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountUpdateAuthority extends string | IAccountMeta<string> = string,
  TAccountNamespace extends string | IAccountMeta<string> = string,
  TAccountWhitelist extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
>(
  accounts: {
    payer: TAccountPayer extends string
      ? Address<TAccountPayer>
      : TAccountPayer;
    updateAuthority: TAccountUpdateAuthority extends string
      ? Address<TAccountUpdateAuthority>
      : TAccountUpdateAuthority;
    namespace: TAccountNamespace extends string
      ? Address<TAccountNamespace>
      : TAccountNamespace;
    whitelist: TAccountWhitelist extends string
      ? Address<TAccountWhitelist>
      : TAccountWhitelist;
    systemProgram?: TAccountSystemProgram extends string
      ? Address<TAccountSystemProgram>
      : TAccountSystemProgram;
  },
  args: CreateWhitelistV2InstructionDataArgs,
  programAddress: Address<TProgram> = 'TL1ST2iRBzuGTqLn1KXnGdSnEow62BzPnGiqyRXhWtW' as Address<TProgram>,
  remainingAccounts?: TRemainingAccounts
) {
  return {
    accounts: [
      accountMetaWithDefault(accounts.payer, AccountRole.WRITABLE_SIGNER),
      accountMetaWithDefault(
        accounts.updateAuthority,
        AccountRole.WRITABLE_SIGNER
      ),
      accountMetaWithDefault(accounts.namespace, AccountRole.READONLY_SIGNER),
      accountMetaWithDefault(accounts.whitelist, AccountRole.WRITABLE),
      accountMetaWithDefault(
        accounts.systemProgram ??
          ('11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>),
        AccountRole.READONLY
      ),
      ...(remainingAccounts ?? []),
    ],
    data: getCreateWhitelistV2InstructionDataEncoder().encode(args),
    programAddress,
  } as CreateWhitelistV2Instruction<
    TProgram,
    TAccountPayer,
    TAccountUpdateAuthority,
    TAccountNamespace,
    TAccountWhitelist,
    TAccountSystemProgram,
    TRemainingAccounts
  >;
}

export type ParsedCreateWhitelistV2Instruction<
  TProgram extends string = 'TL1ST2iRBzuGTqLn1KXnGdSnEow62BzPnGiqyRXhWtW',
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payer: TAccountMetas[0];
    updateAuthority: TAccountMetas[1];
    namespace: TAccountMetas[2];
    whitelist: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
  };
  data: CreateWhitelistV2InstructionData;
};

export function parseCreateWhitelistV2Instruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[]
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCreateWhitelistV2Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      updateAuthority: getNextAccount(),
      namespace: getNextAccount(),
      whitelist: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCreateWhitelistV2InstructionDataDecoder().decode(instruction.data),
  };
}
