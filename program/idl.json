{
  "version": "0.1.0",
  "name": "whitelist_program",
  "constants": [
    {
      "name": "SLOT_DELAY",
      "type": "u64",
      "value": "100"
    },
    {
      "name": "AUTHORITY_SIZE",
      "type": {
        "defined": "usize"
      },
      "value": "8 + 1 + (32 * 2) + 64"
    },
    {
      "name": "MINT_PROOF_V2_SIZE",
      "type": {
        "defined": "usize"
      },
      "value": "8 + 1 + (32 * 28) + 8 + 32"
    },
    {
      "name": "MAX_PROOF_LEN",
      "type": {
        "defined": "usize"
      },
      "value": "28"
    },
    {
      "name": "MINT_PROOF_SIZE",
      "type": {
        "defined": "usize"
      },
      "value": "8 + (32 * 28) + 1"
    },
    {
      "name": "WHITELIST_V2_BASE_SIZE",
      "type": {
        "defined": "usize"
      },
      "value": "8 + 1 + 1 + 32 + 1 + 32 + 32 + 32"
    },
    {
      "name": "WHITELIST_V2_CONDITIONS_LENGTH",
      "type": {
        "defined": "usize"
      },
      "value": "24"
    },
    {
      "name": "WHITELIST_SIZE",
      "type": {
        "defined": "usize"
      },
      "value": "8 + 1 + 1 + 1 + (32 * 3) + 1 + (33 * 2) + 64"
    }
  ],
  "instructions": [
    {
      "name": "freezeWhitelist",
      "docs": [
        "Freeze a whitelist so that an extra signature is required to update it."
      ],
      "accounts": [
        {
          "name": "whitelist",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "whitelistAuthority",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "there can only be 1 whitelist authority (due to seeds),",
            "and we're checking that 1)the correct cosigner is present on it, and 2)is a signer"
          ]
        },
        {
          "name": "cosigner",
          "isMut": true,
          "isSigner": true,
          "docs": [
            "freezing only requires cosigner"
          ]
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": []
    },
    {
      "name": "initUpdateAuthority",
      "docs": [
        "Initialize or update the whitelist singleton authority."
      ],
      "accounts": [
        {
          "name": "whitelistAuthority",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "cosigner",
          "isMut": true,
          "isSigner": true,
          "docs": [
            "both have to sign on any updates"
          ]
        },
        {
          "name": "owner",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "newCosigner",
          "type": {
            "option": "publicKey"
          }
        },
        {
          "name": "newOwner",
          "type": {
            "option": "publicKey"
          }
        }
      ]
    },
    {
      "name": "initUpdateMintProof",
      "docs": [
        "Initialize or update a mint proof."
      ],
      "accounts": [
        {
          "name": "whitelist",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "mint",
          "isMut": false,
          "isSigner": false
        },
        {
          "name": "mintProof",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "user",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "proof",
          "type": {
            "vec": {
              "array": [
                "u8",
                32
              ]
            }
          }
        }
      ]
    },
    {
      "name": "initUpdateWhitelist",
      "docs": [
        "Initialize or update a whitelist."
      ],
      "accounts": [
        {
          "name": "whitelist",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "whitelistAuthority",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "there can only be 1 whitelist authority (due to seeds),",
            "and we're checking that 1)the correct cosigner is present on it, and 2)is a signer"
          ]
        },
        {
          "name": "cosigner",
          "isMut": true,
          "isSigner": true,
          "docs": [
            "only cosigner has to sign for unfrozen, for frozen owner also has to sign"
          ]
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "uuid",
          "type": {
            "array": [
              "u8",
              32
            ]
          }
        },
        {
          "name": "rootHash",
          "type": {
            "option": {
              "array": [
                "u8",
                32
              ]
            }
          }
        },
        {
          "name": "name",
          "type": {
            "option": {
              "array": [
                "u8",
                32
              ]
            }
          }
        },
        {
          "name": "voc",
          "type": {
            "option": "publicKey"
          }
        },
        {
          "name": "fvc",
          "type": {
            "option": "publicKey"
          }
        }
      ]
    },
    {
      "name": "reallocAuthority",
      "docs": [
        "Reallocate space on the whitelist authority singleton."
      ],
      "accounts": [
        {
          "name": "whitelistAuthority",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "there can only be 1 whitelist authority (due to seeds),",
            "and we're checking that 1)the correct cosigner is present on it, and 2)is a signer"
          ]
        },
        {
          "name": "cosigner",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": []
    },
    {
      "name": "reallocWhitelist",
      "docs": [
        "Reallocate space on the whitelist."
      ],
      "accounts": [
        {
          "name": "whitelist",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "whitelistAuthority",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "there can only be 1 whitelist authority (due to seeds),",
            "and we're checking that 1)the correct cosigner is present on it, and 2)is a signer"
          ]
        },
        {
          "name": "cosigner",
          "isMut": true,
          "isSigner": true
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": []
    },
    {
      "name": "unfreezeWhitelist",
      "docs": [
        "Unfreeze a whitelist so that only one signature is required to update it."
      ],
      "accounts": [
        {
          "name": "whitelist",
          "isMut": true,
          "isSigner": false
        },
        {
          "name": "whitelistAuthority",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "there can only be 1 whitelist authority (due to seeds),",
            "and we're checking that 1)the correct cosigner is present on it, and 2)is a signer"
          ]
        },
        {
          "name": "owner",
          "isMut": true,
          "isSigner": true,
          "docs": [
            "unfreezing requires owner"
          ]
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": []
    },
    {
      "name": "createWhitelistV2",
      "docs": [
        "Create a new whitelist V2."
      ],
      "accounts": [
        {
          "name": "payer",
          "isMut": true,
          "isSigner": true,
          "docs": [
            "The rent payer."
          ]
        },
        {
          "name": "updateAuthority",
          "isMut": true,
          "isSigner": true,
          "docs": [
            "The authority that will be allowed to update the whitelist."
          ]
        },
        {
          "name": "namespace",
          "isMut": false,
          "isSigner": true,
          "docs": [
            "Namespace keypair used to derive the whitelist PDA."
          ]
        },
        {
          "name": "whitelist",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The whitelist PDA."
          ]
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false
        }
      ],
      "args": [
        {
          "name": "args",
          "type": {
            "defined": "CreateWhitelistV2Args"
          }
        }
      ]
    },
    {
      "name": "updateWhitelistV2",
      "docs": [
        "Update a whitelist V2."
      ],
      "accounts": [
        {
          "name": "payer",
          "isMut": true,
          "isSigner": true,
          "docs": [
            "Rent payer if reallocating the WhitelistV2 account to include more conditions."
          ]
        },
        {
          "name": "updateAuthority",
          "isMut": true,
          "isSigner": true,
          "docs": [
            "The current update authority."
          ]
        },
        {
          "name": "newUpdateAuthority",
          "isMut": false,
          "isSigner": true,
          "isOptional": true
        },
        {
          "name": "whitelist",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The WhitelistV2 account to update."
          ]
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "The Solana system program."
          ]
        }
      ],
      "args": [
        {
          "name": "args",
          "type": {
            "defined": "UpdateWhitelistV2Args"
          }
        }
      ]
    },
    {
      "name": "initUpdateMintProofV2",
      "docs": [
        "Initialize or update a mint proof V2."
      ],
      "accounts": [
        {
          "name": "payer",
          "isMut": true,
          "isSigner": true,
          "docs": [
            "Rent payer for the mint proof account if it is initialized."
          ]
        },
        {
          "name": "mint",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "The mint account for which the proof is being created."
          ]
        },
        {
          "name": "whitelist",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "The whitelist account that the mint proof must validate against."
          ]
        },
        {
          "name": "mintProof",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The mint proof account to initialize or update."
          ]
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "The Solana system program account."
          ]
        }
      ],
      "args": [
        {
          "name": "proof",
          "type": {
            "vec": {
              "array": [
                "u8",
                32
              ]
            }
          }
        }
      ]
    },
    {
      "name": "closeMintProofV2",
      "docs": [
        "Close a mint proof V2."
      ],
      "accounts": [
        {
          "name": "payer",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Receives rent if < 100 slots after mint_proof creation."
          ]
        },
        {
          "name": "signer",
          "isMut": true,
          "isSigner": true,
          "docs": [
            "Signing account, will receive rent if > 100 slots after mint_proof creation."
          ]
        },
        {
          "name": "mintProof",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The mint proof account to close."
          ]
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "The Solana system program account."
          ]
        }
      ],
      "args": []
    },
    {
      "name": "freezeWhitelistV2",
      "docs": [
        "Freeze a whitelist V2."
      ],
      "accounts": [
        {
          "name": "freezeAuthority",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "whitelist",
          "isMut": true,
          "isSigner": false
        }
      ],
      "args": []
    },
    {
      "name": "unfreezeWhitelistV2",
      "docs": [
        "Unfreeze a whitelist V2."
      ],
      "accounts": [
        {
          "name": "freezeAuthority",
          "isMut": false,
          "isSigner": true
        },
        {
          "name": "whitelist",
          "isMut": true,
          "isSigner": false
        }
      ],
      "args": []
    }
  ],
  "accounts": [
    {
      "name": "Authority",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "bump",
            "type": "u8"
          },
          {
            "name": "cosigner",
            "docs": [
              "cosigner of the whitelist - has rights to update it if unfrozen"
            ],
            "type": "publicKey"
          },
          {
            "name": "owner",
            "docs": [
              "owner of the whitelist (stricter, should be handled more carefully)",
              "has rights to 1)freeze, 2)unfreeze, 3)update frozen whitelists"
            ],
            "type": "publicKey"
          },
          {
            "name": "reserved",
            "type": {
              "array": [
                "u8",
                64
              ]
            }
          }
        ]
      }
    },
    {
      "name": "MintProofV2",
      "docs": [
        "MintProof V2 state",
        "Seeds: [\"mint_proof_v2\", mint, whitelist]",
        "",
        "The state account for MintProofV2 that stores the proof",
        "that a particular mint is part of a Merkle tree. The account",
        "is derived from the mint and the whitelist to tie them together uniquely.",
        "",
        "Mint proofs are designed to be created on-the-fly when needed, typically in the same",
        "transaction. Creating and closing them is permissionless, but the creation slot is used",
        "to determine if the original payer receives the rent back or if the current caller does.",
        "There is a 100 slot delay after which the current caller receives the rent back to incentivize",
        "cleaning up old accounts."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "proofLen",
            "docs": [
              "Length of proof without padding."
            ],
            "type": "u8"
          },
          {
            "name": "proof",
            "docs": [
              "Proof that the mint is part of the Merkle tree."
            ],
            "type": {
              "array": [
                {
                  "array": [
                    "u8",
                    32
                  ]
                },
                28
              ]
            }
          },
          {
            "name": "creationSlot",
            "docs": [
              "Slot the proof was created."
            ],
            "type": "u64"
          },
          {
            "name": "payer",
            "docs": [
              "The account that paid for creation of the proof."
            ],
            "type": "publicKey"
          }
        ]
      }
    },
    {
      "name": "MintProof",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "proofLen",
            "type": "u8"
          },
          {
            "name": "proof",
            "type": {
              "array": [
                {
                  "array": [
                    "u8",
                    32
                  ]
                },
                28
              ]
            }
          }
        ]
      }
    },
    {
      "name": "WhitelistV2",
      "docs": [
        "Whitelist V2 state",
        "Seeds: `[\"whitelist\", <namespace>, <uuid>]`",
        "",
        "The state account for Whitelist V2. This account stores all the information",
        "and values of a Whitelist, including the list of conditions to validate an item against."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "version",
            "docs": [
              "Whitelist version, used to control upgrades."
            ],
            "type": "u8"
          },
          {
            "name": "bump",
            "docs": [
              "Bump seed used to derive the PDA."
            ],
            "type": "u8"
          },
          {
            "name": "uuid",
            "docs": [
              "Owner-chosen identifier for the whitelist."
            ],
            "type": {
              "array": [
                "u8",
                32
              ]
            }
          },
          {
            "name": "state",
            "docs": [
              "Whitelist state--currently either Frozen or Unfrozen."
            ],
            "type": {
              "defined": "State"
            }
          },
          {
            "name": "updateAuthority",
            "docs": [
              "Authority that can update the whitelist."
            ],
            "type": "publicKey"
          },
          {
            "name": "namespace",
            "docs": [
              "Namespace for the whitelist to further differentiate it from other whitelists owned by the same authority."
            ],
            "type": "publicKey"
          },
          {
            "name": "freezeAuthority",
            "docs": [
              "Authority that can freeze/unfreeze the whitelist."
            ],
            "type": "publicKey"
          },
          {
            "name": "conditions",
            "docs": [
              "Whitelist conditions that must be met to validate against the whitelist."
            ],
            "type": {
              "vec": {
                "defined": "Condition"
              }
            }
          }
        ]
      }
    },
    {
      "name": "Whitelist",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "version",
            "type": "u8"
          },
          {
            "name": "bump",
            "type": "u8"
          },
          {
            "name": "verified",
            "docs": [
              "DEPRECATED, doesn't do anything"
            ],
            "type": "bool"
          },
          {
            "name": "rootHash",
            "docs": [
              "in the case when not present will be [u8; 32]"
            ],
            "type": {
              "array": [
                "u8",
                32
              ]
            }
          },
          {
            "name": "uuid",
            "type": {
              "array": [
                "u8",
                32
              ]
            }
          },
          {
            "name": "name",
            "type": {
              "array": [
                "u8",
                32
              ]
            }
          },
          {
            "name": "frozen",
            "type": "bool"
          },
          {
            "name": "voc",
            "type": {
              "option": "publicKey"
            }
          },
          {
            "name": "fvc",
            "type": {
              "option": "publicKey"
            }
          },
          {
            "name": "reserved",
            "type": {
              "array": [
                "u8",
                64
              ]
            }
          }
        ]
      }
    }
  ],
  "types": [
    {
      "name": "CreateWhitelistV2Args",
      "docs": [
        "Arguments for creating a Whitelist V2 account.",
        "Optional freeze authority defaulst to the system program pubkey if not provided."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "uuid",
            "type": {
              "array": [
                "u8",
                32
              ]
            }
          },
          {
            "name": "freezeAuthority",
            "type": {
              "option": "publicKey"
            }
          },
          {
            "name": "conditions",
            "type": {
              "vec": {
                "defined": "Condition"
              }
            }
          }
        ]
      }
    },
    {
      "name": "UpdateWhitelistV2Args",
      "docs": [
        "Update whitelist v2 args.",
        "",
        "Operation is a tri-state enum that allows leaving the authority unchanged, clearing it, or setting it to a new pubkey.",
        "Conditions can't be cleared to be empty, so None is the equivalent of a no-op."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "freezeAuthority",
            "type": {
              "defined": "Operation"
            }
          },
          {
            "name": "conditions",
            "type": {
              "option": {
                "vec": {
                  "defined": "Condition"
                }
              }
            }
          }
        ]
      }
    },
    {
      "name": "FullMerkleProof",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "proof",
            "type": {
              "vec": {
                "array": [
                  "u8",
                  32
                ]
              }
            }
          },
          {
            "name": "leaf",
            "type": {
              "array": [
                "u8",
                32
              ]
            }
          }
        ]
      }
    },
    {
      "name": "Condition",
      "docs": [
        "Defines a whitelist condition that items are checked against.",
        "Conditions are made up of a mode and a value.",
        "The mode determines what kind of value is present to be validated against.",
        "The value is the data used to validate against the whitelist.",
        "",
        "Current modes:",
        "- MerkleTree: The value is the root node of a Merkle tree.",
        "- VOC: The value is the Metaplex \"verified-on-chain\"/Metaplex Certified Collection address.",
        "- FVC: The value is the first verified creator address of the Metaplex creators metadata."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "mode",
            "type": {
              "defined": "Mode"
            }
          },
          {
            "name": "value",
            "type": "publicKey"
          }
        ]
      }
    },
    {
      "name": "Operation",
      "docs": [
        "Noop -- do nothing",
        "Clear -- clear the value",
        "Set -- set the value to the given pubkey"
      ],
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Noop"
          },
          {
            "name": "Clear"
          },
          {
            "name": "Set",
            "fields": [
              "publicKey"
            ]
          }
        ]
      }
    },
    {
      "name": "State",
      "docs": [
        "White list state enum. Currently only supports Frozen and Unfrozen."
      ],
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Unfrozen"
          },
          {
            "name": "Frozen"
          }
        ]
      }
    },
    {
      "name": "Mode",
      "docs": [
        "Mode enum for whitelist conditions."
      ],
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "MerkleTree"
          },
          {
            "name": "VOC"
          },
          {
            "name": "FVC"
          }
        ]
      }
    },
    {
      "name": "WhitelistType",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "V1",
            "fields": [
              {
                "defined": "Whitelist"
              }
            ]
          },
          {
            "name": "V2",
            "fields": [
              {
                "defined": "WhitelistV2"
              }
            ]
          }
        ]
      }
    },
    {
      "name": "MintProofType",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "V1",
            "fields": [
              {
                "defined": "MintProof"
              }
            ]
          },
          {
            "name": "V2",
            "fields": [
              {
                "defined": "MintProofV2"
              }
            ]
          }
        ]
      }
    }
  ],
  "errors": [
    {
      "code": 6000,
      "name": "BadCosigner",
      "msg": "passed in cosigner doesnt have the rights to do this"
    },
    {
      "code": 6001,
      "name": "MissingVerification",
      "msg": "missing all 3 verification methods: at least one must be present"
    },
    {
      "code": 6002,
      "name": "MissingName",
      "msg": "missing name"
    },
    {
      "code": 6003,
      "name": "BadWhitelist",
      "msg": "bad whitelist"
    },
    {
      "code": 6004,
      "name": "ProofTooLong",
      "msg": "proof provided exceeds the limit of 32 hashes"
    },
    {
      "code": 6005,
      "name": "BadOwner",
      "msg": "passed in owner doesnt have the rights to do this"
    },
    {
      "code": 6006,
      "name": "FailedVocVerification",
      "msg": "failed voc verification"
    },
    {
      "code": 6007,
      "name": "FailedFvcVerification",
      "msg": "failed fvc verification"
    },
    {
      "code": 6008,
      "name": "FailedMerkleProofVerification",
      "msg": "failed merkle proof verification"
    },
    {
      "code": 6009,
      "name": "NoConditions",
      "msg": "no whitelist conditions provided"
    },
    {
      "code": 6010,
      "name": "InvalidAuthority",
      "msg": "invalid authority"
    },
    {
      "code": 6011,
      "name": "NotMerkleRoot",
      "msg": "condition at index not a merkle root"
    },
    {
      "code": 6012,
      "name": "InvalidWhitelistIndex",
      "msg": "invalid whitelist index"
    },
    {
      "code": 6013,
      "name": "TooManyConditions",
      "msg": "too many conditions"
    },
    {
      "code": 6014,
      "name": "EmptyConditions",
      "msg": "cannot have empty conditions"
    },
    {
      "code": 6015,
      "name": "TooManyMerkleProofs",
      "msg": "too many merkle proofs"
    },
    {
      "code": 6016,
      "name": "WhitelistIsFrozen",
      "msg": "whitelist is frozen"
    },
    {
      "code": 6017,
      "name": "BadMintProof",
      "msg": "bad mint proof"
    },
    {
      "code": 6018,
      "name": "MissingMintProof",
      "msg": "missing mint proof"
    }
  ],
  "metadata": {
    "address": "TL1ST2iRBzuGTqLn1KXnGdSnEow62BzPnGiqyRXhWtW",
    "origin": "anchor",
    "binaryVersion": "0.29.0",
    "libVersion": "0.29.0"
  }
}